import os
import redis
import base64
def extract_sold_item_info(payload:dict):
    
    retDict = {}
    temp = payload['payload']
    sale_price_str = test['payload']['sale_price']
    usd_price_str = test['payload']['payment_token']['usd_price']

    # Convert the sale price and USD price to float
    sale_price = float(sale_price_str) / 1e18
    usd_price = float(usd_price_str)

    # Calculate the total sale price in USD
    total_usd = sale_price * usd_price

    # Format the total sale price with comma separation and two decimal places
    formatted_usd = "{:,.2f}".format(total_usd)

    retDict['chain']=temp['chain']
    retDict['from_address']=temp['maker']['address']
    retDict['to_address']=temp['taker']['address']
    #payload.item.metadata.image_url
    retDict['image_url']=temp['item']['metadata']['image_url']
    retDict['nft_name']=temp['item']['metadata']['name']
    retDict['nft_link']=temp['item']['permalink']
    retDict['amount_symbol'] = payload['payload']['payment_token']['symbol']
    retDict['amount_token'] = int(payload['payload']['sale_price']) / (10 ** int(payload['payload']['payment_token']['decimals']))
    retDict['amount_usd'] = formatted_usd
    retDict['encoded_nft_link'] = base64.urlsafe_b64encode(retDict['nft_link'].encode()).decode()
    return retDict

r = redis.from_url(os.environ["REDIS_URL_DOGS"])
current_token=r.get("token")
current_save_token=r.get("save_token")

print(f"current_token: {current_save_token}")

print(f"current_save_token: {current_save_token}")
test={'event_type': 'item_sold', 'payload': {'chain': 'avalanche', 'closing_date': '2024-01-23T04:17:33.000000+00:00', 'collection': {'slug': 'coqvshunter'}, 'event_timestamp': '2024-01-23T04:17:33.000000+00:00', 'is_private': False, 'item': {'chain': {'name': 'avalanche'}, 'metadata': {'animation_url': None, 'image_url': 'https://raw.seadn.io/files/80ff5ff5c7e41fc9a6c181611951d3f3.svg', 'metadata_url': 'data:application/json;base64,', 'name': 'Coq #24818'}, 'nft_id': 'avalanche/0x993869979f9f3e8269790c478eb55f1a43827981/24818', 'permalink': 'https://opensea.io/assets/avalanche/0x993869979f9f3e8269790c478eb55f1a43827981/24818'}, 'listing_type': None, 'maker': {'address': '0xe95fe75b8211ff7101ee6c68c3e743f5ff6c0b33'}, 'order_hash': '0xf387c7d0ca46edf7e75be7537f17d278ec2934e32bbe4138dee2f94ca20a8a53', 'payment_token': {'address': '0x0000000000000000000000000000000000000000', 'decimals': 18, 'eth_price': '0.012810010000000', 'name': 'AVAX', 'symbol': 'AVAX', 'usd_price': '29.940000000000001000'}, 'protocol_address': '0x00000000000000adc04c56bf30ac9d3c0aaf14dc', 'protocol_data': {'parameters': {'conduitKey': '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000', 'consideration': [{'endAmount': '194970251000000000', 'identifierOrCriteria': '0', 'itemType': 0, 'recipient': '0xE95Fe75B8211fF7101EE6c68c3e743f5fF6c0B33', 'startAmount': '194970251000000000', 'token': '0x0000000000000000000000000000000000000000'}, {'endAmount': '4999750000000000', 'identifierOrCriteria': '0', 'itemType': 0, 'recipient': '0x0000a26b00c1F0DF003000390027140000fAa719', 'startAmount': '4999750000000000', 'token': '0x0000000000000000000000000000000000000000'}, {'endAmount': '19999000000000', 'identifierOrCriteria': '0', 'itemType': 0, 'recipient': '0xf4b16a8a8371B650D8D734C52F5656fdE9C047B8', 'startAmount': '19999000000000', 'token': '0x0000000000000000000000000000000000000000'}], 'counter': 0, 'endTime': '1708661580', 'offer': [{'endAmount': '1', 'identifierOrCriteria': '24818', 'itemType': 2, 'startAmount': '1', 'token': '0x993869979F9F3E8269790C478eB55f1A43827981'}], 'offerer': '0xe95fe75b8211ff7101ee6c68c3e743f5ff6c0b33', 'orderType': 0, 'salt': '0x360c6ebe0000000000000000000000000000000000000000bd011544efa396cc', 'startTime': '1705983303', 'totalOriginalConsiderationItems': 3, 'zone': '0x0000000000000000000000000000000000000000', 'zoneHash': '0x0000000000000000000000000000000000000000000000000000000000000000'}, 'signature': None}, 'quantity': 1, 'sale_price': '99999900000999000000000', 'taker': {'address': '0xef7487a0603671a7e6ebdf7ef0f6f88a75e99c46'}, 'transaction': {'hash': '0x400d876bd4a1198b1ebc465264053f717151b16e2a28f53d872ca75a1e942071', 'timestamp': '2024-01-23T04:17:33.000000+00:00'}}, 'sent_at': '2024-01-23T04:17:41.418807+00:00'}

test2=extract_sold_item_info(test)
# Extract the necessary values from the payload
# Extract the necessary values from the payload
sale_price_str = test['payload']['sale_price']
usd_price_str = test['payload']['payment_token']['usd_price']

# Convert the sale price and USD price to float
sale_price = float(sale_price_str) / 1e18
usd_price = float(usd_price_str)

# Calculate the total sale price in USD
total_usd = sale_price * usd_price

# Format the total sale price with comma separation and two decimal places
formatted_usd = "{:,.2f}".format(total_usd)


print(formatted_usd)